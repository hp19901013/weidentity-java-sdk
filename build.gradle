buildscript {
    repositories {
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.5"
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.7"
    }
}

plugins {
    id "me.champeau.gradle.jmh" version "0.4.7"
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: "me.champeau.gradle.jmh"

// Specify JDK version - may vary in different scenarios
sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
// In this section you declare where to find the dependencies of your project
repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }

    mavenLocal()
    mavenCentral()
}

List lombok = [
        'org.projectlombok:lombok:1.16.14'
]

List logger = [
        "org.slf4j:jul-to-slf4j:1.7.10",
        "org.apache.logging.log4j:log4j-api:2.1",
        "org.apache.logging.log4j:log4j-core:2.1",
        "org.apache.logging.log4j:log4j-slf4j-impl:2.1",
        "org.apache.logging.log4j:log4j-web:2.1"
]

def spring_version = "4.1.8.RELEASE"
List spring = [
        "org.springframework:spring-core:$spring_version",
        "org.springframework:spring-beans:$spring_version",
        "org.springframework:spring-context:$spring_version",
        "org.springframework:spring-tx:$spring_version",
        "org.springframework:spring-jdbc:$spring_version",
        "org.springframework:spring-test:$spring_version"
]
// junit test
List junit = [
        "junit:junit:4.12",
        "org.springframework:spring-test:$spring_version"
]

List apache_commons = [
        "org.apache.commons:commons-collections4:4.1",
        "org.apache.commons:commons-lang3:3.5",
        "commons-cli:commons-cli:1.3.1"
]

List jmockit = [
        "org.jmockit:jmockit:1.9"
]

dependencies {
    compile logger, spring, lombok, apache_commons
    testCompile logger, spring, lombok, junit, jmockit

    compile "com.fasterxml.jackson.core:jackson-databind:2.8.8.1"
    compile 'io.netty:netty-all:4.1.15.Final'
    compile 'io.netty:netty-tcnative:2.0.0.Final'
    compile 'com.google.guava:guava:19.0'
    compile 'com.github.fge:json-schema-validator:2.2.6'
    compile files('lib/web3sdk.jar')
    compile 'org.apache.httpcomponents:httpclient:4.5.2',
            'org.bouncycastle:bcprov-jdk15on:1.54',
            'com.lambdaworks:scrypt:1.4.0',
            'com.squareup:javapoet:1.7.0',
            'io.reactivex:rxjava:1.2.4',
            'com.github.jnr:jnr-unixsocket:0.15'
//    jmh group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.21'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
    jmh {
        java {
            srcDirs = ['src/jmh/java']
        }
        resources {
            srcDirs = ['src/jmh/resources']
        }
    }
}

jar {
    destinationDir file('dist/app')
    archiveName project.name + '.jar'
    exclude '**/*.xml'
    exclude '**/*.properties'
    exclude '**/*.keystore'
    exclude '**/*.crt'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll { File f -> (f.name.endsWith('.bat') || f.name.endsWith('.sh') || f.name.endsWith('.env')) }
            into 'dist'
        }
    }
}

checkstyle {
    showViolations true
    toolVersion '8.12'
}

tasks.withType(Checkstyle) {
    include '**/*.java'
    exclude '**/contract/*.java'
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    include '**/*.java'
    exclude '**/contract/*.java'
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/spotbugs.xsl')
    }
}

jmhJar {
    destinationDir file('dist/jmh/app')
    exclude '**/*.xml'
    exclude '**/*.properties'
    exclude '**/*.keystore'
    exclude '**/*.crt'
    exclude '**/*.jar'
    manifest {
        attributes 'Main-Class': 'com.webank.weid.JmhMain'
        attributes 'Class-Path': configurations.compile.collect {
            '../lib/' + it.getName()
        }.join(' ') + configurations.jmh.collect {
            '../lib/' + it.getName()
        }.join(' ') + " ../conf/ "
    }

    doLast {
        copy {
            from configurations.runtime, configurations.jmh
            into 'dist/jmh/lib'
        }
        copy {
            from file('src/main/resources/'), file('src/jmh/resources/')
            into 'dist/jmh/conf'
        }
    }
}
jmh {
    jmhVersion = '1.21'
}
clean {
    delete("dist")
}
